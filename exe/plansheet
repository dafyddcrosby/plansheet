#!/usr/bin/env ruby
# frozen_string_literal: true

require "plansheet"
require "optparse"

options = {}
parser = OptionParser.new
parser.on(
  "--sheet [TYPE]",
  "Generates MD/LaTeX project PDF"
) do |sheet_type|
  options[:sheet] = sheet_type || "projects"
end
parser.on(
  "--sort",
  "Sort project files"
)
parser.on(
  "--irb",
  "Open IRB console after loading projects"
)
parser.on(
  "--cli",
  "CLI dump of projects (WIP)"
)
parser.on(
  "--stats",
  "Various stats (WIP)"
)
parser.on(
  "--time-roi",
  "Show projects with a time return-on-investment"
)
parser.on(
  "--needs-thinking",
  "Show projects that need tasks, time estimates, etc (WIP)"
)
parser.on(
  "--calendar",
  "List of projects ordered by due date"
)
parser.on(
  "--location_filter LOCATION",
  "location filter for CLI dump (WIP)"
)
parser.parse!(into: options)

config = Plansheet.load_config
pool = Plansheet::Pool.new({ projects_dir: config["projects_dir"],
                             sort_order: config["sort_order"] })

if options[:sheet] || options.empty?
  # TODO: Add pdflatex command (customizable path)
  require "plansheet/sheet"
  FileUtils.mkdir_p config["output_dir"]
  case options[:sheet]
  when "monthly"
    Plansheet::MonthlyLaTeXSheet.new("#{config["output_dir"]}/monthly.tex", config["monthly"])
  else
    project_arr = pool.projects
    project_arr.delete_if { |x| %w[dropped done paused].include? x.status }
    Plansheet::LaTeXSheet.new("#{config["output_dir"]}/projects.tex", project_arr)
  end
elsif options[:irb]
  binding.irb # rubocop:disable Lint/Debugger
elsif options[:stats]
  require "plansheet/time"
  include Plansheet::TimeUtils # rubocop:disable Style/MixinUsage
  puts "# of projects: #{pool.projects.count}"
  puts "# of tasks: #{pool.projects.sum { |x| x&.tasks&.count || 0 }}"
  puts "# of locations: #{pool.projects.collect(&:location).flatten.delete_if(&:nil?).uniq.count}"
  time = Plansheet::TimeUtils.build_time_duration(pool.projects.sum { |x| x.time_estimate_minutes || 0 })
  puts "combined time estimate: #{time}"
elsif options[:sort]
  # Pool sorts projects, this now just matches old behaviour
  pool.write_projects
elsif options[:"time-roi"]
  project_arr = pool.projects.select { |x| x.time_roi_payoff != 0 && !x.dropped_or_done? }.sort
  project_arr.each do |proj|
    puts proj
    puts "time ROI payoff: #{proj.time_roi_payoff}"
    puts "\n"
  end
elsif options[:"needs-thinking"]
  puts "Projects with no tasks"
  project_arr = pool.projects.sort
  project_arr.delete_if(&:dropped_or_done?)
  project_arr.delete_if(&:tasks)
  project_arr.each do |proj|
    puts proj
    puts "\n"
  end
elsif options[:calendar]
  # TODO: add a project filter method
  project_arr = pool.projects
  project_arr.delete_if { |x| x.status == "dropped" || x.status == "done" }
  project_arr.delete_if { |x| x.due.nil? }
  project_arr.sort_by!(&:due)
  project_arr.each do |proj|
    puts proj
    puts "\n"
  end
elsif options[:cli]
  # TODO: add a project filter method
  project_arr = pool.projects
  project_arr.delete_if { |x| x.status == "dropped" || x.status == "done" }
  project_arr.select! { |x| x.location == options[:location_filter] } if options[:location_filter]
  project_arr.each do |proj|
    puts proj
    puts "\n"
  end
end
