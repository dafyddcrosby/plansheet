# frozen_string_literal: true

require "date"
module Plansheet
  # The Sheet class constructs a Markdown/LaTeX file for use with pandoc
  class LaTeXSheet
    def initialize(output_file, project_arr)
      projects_str = String.new
      projects_str << sheet_header

      project_arr.each do |p|
        projects_str << project_minipage(p)
      end
      puts "Writing to #{output_file}"
      projects_str << sheet_footer
      File.write(output_file, projects_str)
    end

    def sheet_header
      # LaTeX used to be generated by pandoc
      <<~FRONTMATTER
        \\PassOptionsToPackage{unicode}{hyperref}
        \\PassOptionsToPackage{hyphens}{url}
        \\documentclass[]{article}
        \\author{}
        \\date{#{Date.today}}
        \\usepackage{amsmath,amssymb}
        \\usepackage{lmodern}
        \\usepackage{iftex}
          \\usepackage[T1]{fontenc}
          \\usepackage[utf8]{inputenc}
          \\usepackage{textcomp}
        \\IfFileExists{upquote.sty}{\\usepackage{upquote}}{}
        \\IfFileExists{microtype.sty}{
          \\usepackage[]{microtype}
          \\UseMicrotypeSet[protrusion]{basicmath}
        }{}
        \\makeatletter
        \\@ifundefined{KOMAClassName}{
          \\IfFileExists{parskip.sty}{
            \\usepackage{parskip}
          }{
            \\setlength{\\parindent}{0pt}
            \\setlength{\\parskip}{6pt plus 2pt minus 1pt}}
        }{
          \\KOMAoptions{parskip=half}}
        \\makeatother
        \\usepackage{xcolor}
        \\IfFileExists{xurl.sty}{\\usepackage{xurl}}{}
        \\IfFileExists{bookmark.sty}{\\usepackage{bookmark}}{\\usepackage{hyperref}}
        \\hypersetup{
          hidelinks,
          pdfcreator={LaTeX via plansheet}}
        \\urlstyle{same}
        \\usepackage[margin=1.5cm]{geometry}
        \\setlength{\\emergencystretch}{3em}
        \\providecommand{\\tightlist}{
          \\setlength{\\itemsep}{0pt}\\setlength{\\parskip}{0pt}}
        \\setcounter{secnumdepth}{-\\maxdimen}

        \\begin{document}

        \\thispagestyle{empty}

        \\section{Date: #{Date.today}}
      FRONTMATTER
    end

    def sheet_footer
      '\end{document}'
    end

    def project_minipage(proj)
      str = String.new
      str << "\\begin{minipage}{6cm}\n"
      str << project_header(proj)
      proj&.tasks&.each do |t|
        str << "$\\square$ #{sanitize_string(t)} \\\\\n"
      end
      str << "\\end{minipage}\n"
      str
    end

    def sanitize_string(str)
      str.gsub("_", '\_')
    end

    def project_header(proj)
      str = String.new
      str << "#{sanitize_string(proj.namespace)}: #{sanitize_string(proj.name)}\\\\\n"
      str << proj.status.to_s
      str << " - #{sanitize_string(proj.location)}" if proj.location
      str << " due: #{proj.due}" if proj.due
      str << " time: #{proj.time_estimate}" if proj.time_estimate
      str << " \\\\\n"
      str
    end
  end
end
